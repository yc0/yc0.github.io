<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>System Design on My journey</title><link>https://yc0.github.io/tags/system-design/</link><description>Recent content in System Design on My journey</description><generator>Hugo -- 0.152.2</generator><language>zh-tw</language><lastBuildDate>Sat, 25 Oct 2025 10:47:02 +0800</lastBuildDate><atom:link href="https://yc0.github.io/tags/system-design/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Amazon comments filtering system</title><link>https://yc0.github.io/posts/design-amazon-comments-filtering-system/</link><pubDate>Wed, 13 Nov 2019 16:27:46 +0000</pubDate><guid>https://yc0.github.io/posts/design-amazon-comments-filtering-system/</guid><description>&lt;h1 id="comments-filtering-system"&gt;Comments Filtering System&lt;/h1&gt;
&lt;p&gt;Design Amazon comments filtering system. Use UML to design the classes.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id="at-first-glance"&gt;At First Glance&lt;/h2&gt;
&lt;p&gt;Class encapsulating a &amp;lsquo;comment&amp;rsquo;
Main Filter abstract class
Different types of Filter class like AbusiveContentFilter, Special Characters Filter, Duplicate Content Filter etc.
A top &amp;lsquo;Filters&amp;rsquo; class containing a method &amp;lsquo;applyFilters&amp;rsquo; where filters can be passed as an array of &amp;lsquo;Filter&amp;rsquo; objects.
On application of these filters the comment would be cleaned and a return object of type &amp;lsquo;ResultComment&amp;rsquo; with boolean attributes like isCommentOk&lt;/p&gt;</description></item><item><title>Design LSM Database</title><link>https://yc0.github.io/posts/design-lsm-database/</link><pubDate>Wed, 23 Oct 2019 11:41:20 +0000</pubDate><guid>https://yc0.github.io/posts/design-lsm-database/</guid><description>&lt;h2 id="lsm-design-overview"&gt;LSM Design Overview&lt;/h2&gt;
&lt;p&gt;The LSM stores data in three distinct data structures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;shared-memory region&lt;/code&gt;. This may actually be allocated in either shared or heap memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The log file. A circular log file that provides a persistent backup of the contents of the in-memory tree and any other data that has &lt;code&gt;not yet been synced to disk&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The database file. A database file consists of an 8KB &lt;code&gt;header and a body&lt;/code&gt;. The body contains &lt;code&gt;zero or more &amp;quot;sorted runs&amp;quot;&lt;/code&gt; - arrays of key-value pairs sorted by key.&lt;/p&gt;</description></item><item><title>Design a locker</title><link>https://yc0.github.io/posts/design-a-locker/</link><pubDate>Wed, 23 Oct 2019 11:25:51 +0000</pubDate><guid>https://yc0.github.io/posts/design-a-locker/</guid><description>&lt;h2 id="design-a-locker"&gt;Design a locker&lt;/h2&gt;
&lt;p&gt;To monitor the process of how to put the package into a right locker. and one locker for one package. your package and locker have different size, you need to make sure the locker size &amp;gt; package.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;it is just parking lot alike. We can directly manipulate the same concept, or just use the same pattern from Parking Lot
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="objects"&gt;Objects&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Locker&lt;/li&gt;
&lt;li&gt;Location&lt;/li&gt;
&lt;li&gt;Package&lt;/li&gt;
&lt;li&gt;User&lt;/li&gt;
&lt;li&gt;Order&lt;/li&gt;
&lt;li&gt;Shipment&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="work-flows"&gt;Work flows&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Amazon warehouse packages Orders into a Shipment with one or more Packages.&lt;/li&gt;
&lt;li&gt;Insert created Package(s) into a database and associate them with a Shipment.&lt;/li&gt;
&lt;li&gt;Associate Shipment with Order, Associate Order with User.&lt;/li&gt;
&lt;li&gt;Guarantee that the length, width, and height of each Package cannot exceed the largest Locker&amp;rsquo;s length, width, and height.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(Closest Locker Problem)&lt;/code&gt; Find closest Location of lockers to the Package&amp;rsquo;s destination Location.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Check the valid volumns&lt;/code&gt;; check that the Location has a volume of Locker spaces greater than or equal to the Package volume (we only need to check volume because step 3 constrains the dimensions). If not, find second closest Locker Location, and so on and so forth.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(Fitting Problem)&lt;/code&gt; Lockers have a set number of sizes (say small, medium, and large). Now, design an algorithm to fit Packages volume into Locker volume, so that minimum amount of Lockers are used. This is easily imagined as a recursive algorithm where you continuously solve for the remaining Packages until the Packages are all fit into Lockers. Each time you fit a package, you return a list of available boxes (remaining spaces in the locker in terms of boxes for that single Locker). If there are no boxes that fit the remaining packages, look for another Locker for the rest of the packages. This method will return the list of Lockers used for the Shipment.&lt;/li&gt;
&lt;li&gt;Once we know the Packages can be stored at a Locker Location, return the used Locker&amp;rsquo;s Locker IDs and Password to the user (delivery person, recipient, etc).&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Design a Vending Machine</title><link>https://yc0.github.io/posts/design-a-vending-machine/</link><pubDate>Wed, 23 Oct 2019 11:13:32 +0000</pubDate><guid>https://yc0.github.io/posts/design-a-vending-machine/</guid><description>&lt;h2 id="design-a-vending-machine"&gt;Design a Vending Machine&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add items to the vending machine in fixed number of slots&lt;/li&gt;
&lt;li&gt;Payment using card or cash&lt;/li&gt;
&lt;li&gt;Select items to dispense&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="think-of-all-objects-in-reality"&gt;Think of all objects in reality&lt;/h3&gt;
&lt;p&gt;Think of all the Real objects :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customer&lt;/li&gt;
&lt;li&gt;Product/Item (Product/Item Type (softdrink, cold coffee, cold tea))&lt;/li&gt;
&lt;li&gt;Payment (transaction)&lt;/li&gt;
&lt;li&gt;Cash or Card (Credit/Debit Card)&lt;/li&gt;
&lt;li&gt;Buttom,&lt;/li&gt;
&lt;li&gt;Item Code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="work-flow"&gt;Work Flow&lt;/h3&gt;
&lt;p&gt;Think about work flow :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Customer &lt;code&gt;select an item&lt;/code&gt; (by entering the code A5)&lt;/li&gt;
&lt;li&gt;Customer is &lt;code&gt;presented by item price&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Customer &lt;code&gt;chooses to pay or cancels&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Customer can add Card and do payment&lt;/li&gt;
&lt;li&gt;Payment goes through (Item is despense) else add Card info again&lt;/li&gt;
&lt;li&gt;Alernatively, Customer &lt;code&gt;adds bills cal&lt;/code&gt; and &lt;code&gt;return the change&lt;/code&gt; and &lt;code&gt;despense the item&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="design-patttern"&gt;Design patttern&lt;/h3&gt;
&lt;p&gt;take those pattern into accout&lt;/p&gt;</description></item><item><title>Design a configuration management system</title><link>https://yc0.github.io/posts/design-a-configuration-management-system/</link><pubDate>Tue, 22 Oct 2019 16:40:02 +0000</pubDate><guid>https://yc0.github.io/posts/design-a-configuration-management-system/</guid><description>&lt;h2 id="configuration-management-system"&gt;Configuration management system&lt;/h2&gt;
&lt;p&gt;Design a configuration management system&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User should be able to add configuration&lt;/li&gt;
&lt;li&gt;User should be able to delete configuration&lt;/li&gt;
&lt;li&gt;User should be able to search for configuration&lt;/li&gt;
&lt;li&gt;User should be able to subscribe to Configuration So that any updates in configuration will gets notfied to user&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="clarify"&gt;Clarify&lt;/h3&gt;
&lt;p&gt;We want to design a system to persist configurations that can be used by other systems. Configurations will be managed through an internal portal and will be editable only by the user who created them but can be read by any system through a RESTful API. In addition to CRUD (creation, read, updates and deletions) an user can search for configurations and can subscribe to them to receive notifications every time there&amp;rsquo;s a change.&lt;/p&gt;</description></item><item><title>System Design Overview</title><link>https://yc0.github.io/posts/system-design-overview/</link><pubDate>Fri, 18 Oct 2019 11:11:48 +0000</pubDate><guid>https://yc0.github.io/posts/system-design-overview/</guid><description>&lt;h2 id="introduction-system-design"&gt;Introduction System Design&lt;/h2&gt;
&lt;p&gt;from jiuzhang, talk to you how to prepare your system&lt;/p&gt;
&lt;!-- more --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DAU: Daily active user&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Infrastructure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;analyst duo dilgence&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;work solution&lt;/li&gt;
&lt;li&gt;special case&lt;/li&gt;
&lt;li&gt;analysis&lt;/li&gt;
&lt;li&gt;tradeoff&lt;/li&gt;
&lt;li&gt;knowledge base&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4s&amp;rsquo; analysis&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scenario&lt;/li&gt;
&lt;li&gt;service&lt;/li&gt;
&lt;li&gt;storage&lt;/li&gt;
&lt;li&gt;scale&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design systems v.s. Design portion of systems (limit rate of access rate/statistical history)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="breakdown-the"&gt;Breakdown The&lt;/h2&gt;
&lt;h3 id="requirements"&gt;Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;daily active users&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;login/register&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;user profile&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;display/edit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;storage&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;database: sql database =&amp;gt; user table&lt;/li&gt;
&lt;li&gt;nosql database =&amp;gt; tweets/social graph&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;file system&lt;/strong&gt;&lt;/p&gt;</description></item></channel></rss>